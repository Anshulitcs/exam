#include<iostream>
#include<string>
using namespace std;
int *computeFailFunction(const string&pattern, int *fail){
	int m=pattern.size();
	fail[0]=0;  //base case
	int j=0;
	int i=1;
	
	while(i<m){
		if(pattern[i]==pattern[j]){
			
			fail[i]=j+1;
			i++;
			j++;
		}
	else if(j>0){
		j=fail[j-1];
	}	
	else{
		fail[j-1];
		i++;
	}	
}
return fail;
		
	}
	int KMPmatch(const string &text,const string& pattern){
		
	int n=text.size();
	int m=pattern.size();
	if(m==0){
		return -1;     //If pattern empty no match possible
	}	int * fail=new int[m];// allocate memory
	computeFailFunction(pattern,fail);
	int i=0;
	int j=0;
	while(i<n){
		if(pattern[j]==text[i]){
			if(j==m-1){
				delete[]fail;
				return i-m+1;
			}
			i++;
			j++;
		}
		else if(j>0){
			j=fail[j-1];
		}else{
			i++;
		}
	}
		
		delete[]fail;
		return -1;
	}
	int main(){
	string text,pattern;	
	cout<<"enter the taext to be entered"<<endl;
	cin>>text;
	cout<<"enter the pattern to be entered"<<endl;
	cin>>pattern;
	int result=KMPmatch(text,pattern);
	if(result!=-1){
		cout<<"pattern found at index"<<result<<endl;
		
	}
	else
	cout<<"pattern not found"<<endl;
		
	return 0;	
	}
	---------------------------------------------
	#include <iostream>
 
#define I 32767  // Infinity
#define V 7  // # of vertices in Graph
#define E 9  // # of edges in Graph
 
using namespace std;
 
void PrintMCST(int T[][V-1], int A[][E]){
    cout << "\nMinimum Cost Spanning Tree Edges\n" << endl;
    for (int i {0}; i<V-1; i++){
        cout << "[" << T[0][i] << "]-----[" << T[1][i] << "]" << endl;
    }
    cout << endl;
}
 
// Set operations: Union and Find
void Union(int u, int v, int s[]){
    if (s[u] < s[v]){
        s[u] += s[v];
        s[v] = u;
    } else {
        s[v] += s[u];
        s[u] = v;
    }
}
 
int Find(int u, int s[]){
    int x = u;
    int v = 0;
 
    while (s[x] > 0){
        x = s[x];
    }
 
    while (u != x){
        v = s[u];
        s[u] = x;
        u = v;
    }
    return x;
}
 
void KruskalsMCST(int A[3][9]){
    int T[2][V-1];  // Solution array
    int track[E] {0};  // Track edges that are included in solution
    int set[V+1] = {-1, -1, -1, -1, -1, -1, -1, -1};  // Array for finding cycle
 
    int i {0};
    while (i < V-1){
        int min = I;
        int u {0};
        int v {0};
        int k {0};
 
        // Find a minimum cost edge
        for (int j {0}; j<E; j++){
            if (track[j] == 0 && A[2][j] < min){
                min = A[2][j];
                u = A[0][j];
                v = A[1][j];
                k = j;
            }
        }
 
        // Check if the selected min cost edge (u, v) forming a cycle or not
        if (Find(u, set) != Find(v, set)){
            T[0][i] = u;
            T[1][i] = v;
 
            // Perform union
            Union(Find(u, set), Find(v, set), set);
            i++;
        }
        track[k] = 1;
    }
 
    PrintMCST(T, A);
}
 
int main() {
    int edges[3][9] = {{ 1, 1,  2,  2, 3,  4,  4,  5,  5},
                       { 2, 6,  3,  7, 4,  5,  7,  6,  7},
                       {25, 5, 12, 10, 8, 16, 14, 20, 18}};
 
    KruskalsMCST(edges);
 
    return 0;
}
	
	--------------------
#include <iostream>
#include <string>
#include <vector>
using namespace std;

#define ALPHA_SIZE 27

class STreeNode {
public:
    STreeNode* children[ALPHA_SIZE];

    STreeNode() {
        for (int i = 0; i < ALPHA_SIZE; i++) {
            children[i] = NULL;
        }
    }

    ~STreeNode() {
        for (int i = 0; i < ALPHA_SIZE; i++) {
            delete children[i];
        }
    }
};

class STree {
private:
    STreeNode* root;
    string text;

public:
    STree(const string& text) {
        this->text = text + "$";
        root = new STreeNode();
        BuildSTree();
    }

    ~STree() {
        delete root;
    }

    int charToIndex(char c) {
        if (c == '$') return 26;
        return c - 'a';
    }

    void BuildSTree() {
        int n = text.length();
        for (int i = n - 1; i >= 0; i--) {
            STreeNode* currNode = root;
            int j = i;

            while (j < n && currNode->children[charToIndex(text[j])] != NULL) {
                currNode = currNode->children[charToIndex(text[j])];
                j++;
            }

            for (int k = j; k < n; k++) {
                STreeNode* newNode = new STreeNode();
                currNode->children[charToIndex(text[k])] = newNode;
                currNode = newNode;
            }
        }
    }

    void displaySuffixTree() {
        vector<char> path;
        displayHelper(root, path);
    }

private:
    void displayHelper(STreeNode* node, vector<char>& path) {
        bool isLeaf = true;
        for (int i = 0; i < ALPHA_SIZE; i++) {
            if (node->children[i] != NULL) {
                isLeaf = false;
                path.push_back(i == 26 ? '$' : 'a' + i);
                displayHelper(node->children[i], path);
                path.pop_back();
            }
        }
        if (isLeaf) {
            for (int i = 0; i < path.size(); i++) {
                cout << path[i];
            }
            cout << endl;
        }
    }
};

int main() {
    STree st("banana");
    cout << "Suffix tree for 'banana':\n";
    st.displaySuffixTree();
    return 0;
}
	
	
	
